# 2024-08-22 12:10
# act-release-win.yml
name: act-release-win
on:
  workflow_dispatch:

env:
  PRG_NAME:    "jq"
  TAG_VERSION: "jq-v1.7.1"
  TAG_NAME:    "jq"
  VERSION:     "1.7.1"
  TAG_BUILD:   "-b"
  TAG_REF:     "0000000"
  TAG_DATE:    "20240822T080000"
  TAG_FILE:    "_tag_name_.txt"
  OUT_DIR:     "./out"

jobs:
  windows:
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
        include:
          - arch: amd64
            target: x64
            msystem: UCRT64
    runs-on: windows-2022
    env:
      LDFLAGS: -s
      SUFFIX: windows-${{ matrix.arch }}
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Prepare git config
        run: git config --system core.autocrlf false
        shell: bash

      - name: Clone repository
        uses: deep-soft/checkout@v4
        with:
          submodules: true

      - uses: deep-soft/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.msystem }}
          install: >-
            base-devel
            git
            autoconf
            automake
            libtool
          pacboy: >-
            toolchain:p

      - name: Build
        continue-on-error: true
        run: |
          autoreconf -i
          ./configure \
            --disable-docs \
            --disable-valgrind \
            --with-oniguruma=builtin \
            --disable-shared \
            --enable-static \
            --enable-all-static \
            CFLAGS="-O2 -pthread -fstack-protector-all"
          make -j$(nproc)
          file ./jq.exe
          cp ./jq.exe jq-${{ env.SUFFIX }}.exe

      - name: Upload artifacts
        continue-on-error: true
        uses: deep-soft/upload-artifact@v4
        with:
          name: jq-${{ env.SUFFIX }}
          path: jq-${{ env.SUFFIX }}.exe
          if-no-files-found: error
          retention-days: 7

# - get ref set build begin
      - name: Get ref, set build version
        continue-on-error: true
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H');
          # _ref_=$(echo ${_ref_all_::7});
          _date_=$(date +%Y%m%dT%H%M);
          _ref_org_=${{ env.TAG_REF }};
          _ref_len_="${#_ref_org_}";
          _ref_=$(echo ${_ref_all_::$_ref_len_});
          echo "TAG_REF=$_ref_" >> $GITHUB_ENV;
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_;
          _version_=$(grep "define VERSION" 'src/version.h' | awk '{print $3}' | tr , .) || true;
          if [ "$_version_" != "" ]; then
            echo "VERSION=$_version_" >> $GITHUB_ENV;
            echo "TAG_VERSION=${{ env.PRG_NAME }}-$_version_" >> $GITHUB_ENV;
          fi
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV;
          echo "WORK_DIR=$(pwd)" >> $GITHUB_ENV;
          echo "TAG_DATE=$_date_" >> $GITHUB_ENV;
          echo "TAG_FILE=$(pwd)/${{ env.TAG_FILE }}" >> $GITHUB_ENV;

      - name: Print ref, build version
        continue-on-error: true
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF     }}";
          echo "BLD: ${{ env.TAG_BUILD   }}";
          echo "VER: ${{ env.TAG_VERSION }}";
          echo "FIL: ${{ env.TAG_FILE    }}";
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > ${{ env.TAG_FILE }};

      - name: Create source archive
        continue-on-error: true
        uses: deep-soft/zip-release@v3
        with:
          type: 'tar.xz'
          filename: "${{ env.PRG_NAME }}-src-${{ env.VERSION }}-${{ matrix.target }}"
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
          env_variable: ASSET_SRC
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Publish src
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          draft: true
          tag_name: ${{ env.TAG_NAME }}-src
          files: |
            ${{ env.ASSET_SRC }}
            ${{ env.TAG_FILE }}

# Prepare to Publish - begin
      - name: Prepare to Publish
        shell: bash
        run: |
          pwd
          ls -la || true;
          mkdir ${{ env.OUT_DIR }}
          pushd ${{ env.OUT_DIR }}/
          pwd
          ls -la || true;
          cp ../${{ env.PRG_NAME}}.exe ${{ env.PRG_NAME}}-${{ env.SUFFIX }}-${{ env.VERSION }}.exe
          cp ${{ env.TAG_FILE }} "${{ env.PRG_NAME }}-src-${{ env.VERSION }}-${{ matrix.target }}.txt" || true;
          ls -la || true;
          popd
          cat "${{ env.TAG_FILE }}"

# Sign Windows executables begin
      - name: Sign Windows executables files
        continue-on-error: true
        uses: deep-soft/code-sign-action@v9
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          # certificatename: '${{ secrets.CERTNAME }}'
          # folder: './out/final-prerel'
          folder: ${{ env.OUT_DIR }}
          recursive: true
# Sign Windows executables end

      - name: SHA256 checksums
        continue-on-error: true
        uses: deep-soft/sha-checksums@v1
        with:
          type: 'SHA256'
          filename: 'SHA256SUMS'
          directory: '${{ env.OUT_DIR }}'
          path: '.'
          env_variable: 'SHA_SUMS'
          ignore_git: false

      - name: print SHA256 checksums
        continue-on-error: true
        shell: bash
        run: |
          cat "${{ env.SHA_SUMS }}"
          cat "${{ env.TAG_FILE }}"
# Prepare to Publish - end

# zip release begin
      - name: Set Zip name
        shell: bash
        run: |
          #echo "ZIP_NAME=${{ env.PRG_NAME }}-${{ env.VERSION }}-x${{ env.TARGET }}.zip" >>$GITHUB_ENV
          echo "ZIP_NAME=${{ env.PRG_NAME }}-${{ env.VERSION }}-x${{ matrix.target }}.zip" >>$GITHUB_ENV

      - name: Create Zip Archive Release
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.ZIP_NAME }}'
          # directory: '.'
          directory: '${{ env.OUT_DIR }}'
          path: '*.exe *.dll'
          exclusions: '*.git* /*node_modules/* .editorconfig'
          recursive_exclusions: '*.map *.pdb'
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: print env value
        continue-on-error: true
        shell: bash
        run: |
          echo "env.ZIP_RELEASE_ARCHIVE=${{ env.ZIP_RELEASE_ARCHIVE }}";
          ls -la "${{ env.ZIP_RELEASE_ARCHIVE }}";
# zip release end

# upload release begin
      - name: Publish
        continue-on-error: true
        uses: deep-soft/action-gh-release@v2.1
        with:
          #tag_name: ${{ env.TAG_NAME }}-${{ env.VERSION }}
          tag_name: ${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}
          draft: true
          files: |
            ${{ env.OUT_DIR }}/*
# upload release end

      - name: Test
        run: |
          make check VERBOSE=yes
          git diff --exit-code

      - name: Upload Test Logs
        if: ${{ failure() }}
        uses: deep-soft/upload-artifact@v4
        with:
          name: test-logs-${{ env.SUFFIX }}
          retention-days: 7
          path: |
            test-suite.log
            tests/*.log
